import json
import random
from typing import Dict, List

from fastapi import WebSocket


class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞"""
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {chat_name: [websocket1, websocket2, ...]}
        self.active_connections: Dict[str, List[WebSocket]] = {}
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {websocket: username}
        self.user_names: Dict[WebSocket, str] = {}
    
    def generate_username(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        adjectives = ["Happy", "Cool", "Smart", "Brave", "Kind", "Funny", "Wise", "Bright"]
        nouns = ["Cat", "Dog", "Bird", "Fish", "Tiger", "Lion", "Eagle", "Wolf"]
        adjective = random.choice(adjectives)
        noun = random.choice(nouns)
        number = random.randint(1, 999)
        return f"{adjective}{noun}{number}"
    
    async def connect(self, websocket: WebSocket, chat_name: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É"""
        await websocket.accept()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
        if chat_name not in self.active_connections:
            self.active_connections[chat_name] = []
        
        self.active_connections[chat_name].append(websocket)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = self.generate_username()
        self.user_names[websocket] = username
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await self.broadcast_to_room(
            chat_name, 
            f"üëã {username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!",
            exclude_websocket=websocket
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await websocket.send_text(json.dumps({
            "type": "system",
            "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç '{chat_name}'! –í–∞—à–µ –∏–º—è: {username}"
        }))
    
    def disconnect(self, websocket: WebSocket, chat_name: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —á–∞—Ç–∞"""
        if websocket in self.active_connections.get(chat_name, []):
            self.active_connections[chat_name].remove(websocket)
            
            # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
            if not self.active_connections[chat_name]:
                del self.active_connections[chat_name]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if websocket in self.user_names:
                username = self.user_names[websocket]
                del self.user_names[websocket]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
                if chat_name in self.active_connections:
                    self.broadcast_to_room_sync(
                        chat_name,
                        f"üëã {username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!"
                    )
    
    async def broadcast_to_room(self, chat_name: str, message: str, exclude_websocket: WebSocket = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        if chat_name not in self.active_connections:
            return
        
        for websocket in self.active_connections[chat_name]:
            if websocket != exclude_websocket:
                try:
                    await websocket.send_text(json.dumps({
                        "type": "message",
                        "message": message
                    }))
                except:
                    # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    self.active_connections[chat_name].remove(websocket)
    
    def broadcast_to_room_sync(self, chat_name: str, message: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã—Ö–æ–¥–µ)"""
        if chat_name not in self.active_connections:
            return
        
        for websocket in self.active_connections[chat_name]:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_text —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö)
                pass
            except:
                self.active_connections[chat_name].remove(websocket)
    
    async def send_personal_message(self, websocket: WebSocket, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await websocket.send_text(json.dumps({
                "type": "message",
                "message": message
            }))
        except:
            pass
