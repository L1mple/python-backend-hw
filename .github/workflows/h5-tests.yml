name: "HW5 Tests"

on:
  pull_request:
    branches: [ main ]
    paths: [ 'hw5/hw/**' ]
  push:
    branches: [ main ]
    paths: [ 'hw5/hw/**' ]

jobs:
  test-hw5:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    # 🧩 Étape 1 : Récupération du code source
    - name: Checkout code
      uses: actions/checkout@v4

    # 🧠 Étape 2 : Affichage du répertoire courant
    - name: Afficher le répertoire courant
      run: |
        pwd
        ls -la

    # 🧠 Étape 3 : Définir le PYTHONPATH
    - name: Set Python path
      working-directory: hw5/hw
      run: |
        echo "Répertoire courant : $(pwd)"
        ls -la
        echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

    # 🐍 Étape 4 : Installation de Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # 📦 Étape 5 : Installation des dépendances
    - name: Install dependencies
      working-directory: hw5/hw
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    # 🏗️ Étape 6 : Installation du package local
    - name: Install local package
      working-directory: hw5/hw
      run: |
        pip install -e .

    # 🩺 Étape 7 : Diagnostic d'import
    - name: Diagnostic imports
      working-directory: hw5/hw
      env:
        PYTHONPATH: ${{ github.workspace }}/hw5/hw
      run: |
        echo "=== Test import direct ==="
        python -c "import database; print('✅ database import ok')"

    # 🕓 Étape 8 : Attente du démarrage de PostgreSQL
    - name: Wait for PostgreSQL
      run: |
        echo "⏳ Attente du démarrage de PostgreSQL..."
        for i in {1..10}; do
          nc -z localhost 5432 && echo "✅ PostgreSQL prêt !" && break
          echo "PostgreSQL pas encore prêt, nouvelle tentative..."
          sleep 2
        done

    # 🧪 Étape 9 : Exécution des tests avec couverture
    - name: Run tests with coverage
      working-directory: hw5/hw
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/test_db
      run: |
        echo "=== Diagnostic avant tests ==="
        echo "Répertoire courant: $(pwd)"
        echo "PYTHONPATH: $PYTHONPATH"
        ls -la
        echo "=== Chemins Python ==="
        python -c "import sys; print('\n'.join(sys.path))"
        echo "=== Test d'import database ==="
        python -c "from database import Base; print('✅ Import database réussi')" || echo "❌ Import database échoué"
        echo "=== Lancement des tests ==="
        pytest --cov=shop_api --cov-report=xml --cov-report=term-missing -v

    # 📤 Étape 10 : Upload du rapport de couverture
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: hw5/hw/coverage.xml
        flags: unittests
        fail_ci_if_error: false

    # ✅ Étape 11 : Vérification du seuil de couverture
    - name: Check 95% coverage threshold
      working-directory: hw5/hw
      run: |
        python -m coverage report --fail-under=95
