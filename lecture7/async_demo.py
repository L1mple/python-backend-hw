import asyncio
import time
from types import coroutine


async def fetch_user(user_id: int) -> dict:
    print(f"[{time.time():.2f}] üîµ fetch_user({user_id}): –Ω–∞—á–∞–ª–æ")

    await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è I/O –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∑–∞–ø—Ä–æ—Å –∫ –ë–î)

    print(f"[{time.time():.2f}] üîµ fetch_user({user_id}): –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return {"id": user_id, "name": f"User {user_id}"}


async def fetch_orders(user_id: int) -> list:
    print(f"[{time.time():.2f}] üü¢ fetch_orders({user_id}): –Ω–∞—á–∞–ª–æ")

    await asyncio.sleep(1.5)  # –ò–º–∏—Ç–∞—Ü–∏—è I/O –æ–ø–µ—Ä–∞—Ü–∏–∏

    print(f"[{time.time():.2f}] üü¢ fetch_orders({user_id}): –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return [{"order_id": 1}, {"order_id": 2}]


async def send_email(user_id: int) -> None:
    print(f"[{time.time():.2f}] üü° send_email({user_id}): –Ω–∞—á–∞–ª–æ")

    await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è I/O –æ–ø–µ—Ä–∞—Ü–∏–∏

    print(f"[{time.time():.2f}] üü° send_email({user_id}): –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def process_user(user_id: int) -> None:
    print(f"[{time.time():.2f}] process_user({user_id}): –°–¢–ê–†–¢")

    user = await fetch_user(user_id)
    print(f"[{time.time():.2f}] –ü–æ–ª—É—á–µ–Ω user: {user}")

    orders = await fetch_orders(user_id)
    print(f"[{time.time():.2f}] –ü–æ–ª—É—á–µ–Ω—ã orders: {orders}")

    await send_email(user_id)
    print(f"[{time.time():.2f}] Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    print(f"[{time.time():.2f}] process_user({user_id}): –ö–û–ù–ï–¶")


async def main_sequential():
    start = time.time()

    await process_user(1)
    await process_user(2)

    elapsed = time.time() - start
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")


async def main_concurrent():
    start = time.time()

    task1 = asyncio.create_task(process_user(1))
    task2 = asyncio.create_task(process_user(2))

    await task1
    await task2

    elapsed = time.time() - start
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")


async def main_gather():
    start = time.time()

    await asyncio.gather(
        process_user(1),
        process_user(2),
        process_user(3),
    )

    elapsed = time.time() - start
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")


async def demonstrate_event_loop_switching():
    async def task(name: str, sleep_time: float):
        for i in range(3):
            print(f"[{time.time():.2f}] {name}: —à–∞–≥ {i+1}")
            await asyncio.sleep(sleep_time)  # –¢–æ—á–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        print(f"[{time.time():.2f}] {name}: –ó–ê–í–ï–†–®–ï–ù–û")

    await asyncio.gather(
        task("–ó–∞–¥–∞—á–∞ A", 0.5),
        task("–ó–∞–¥–∞—á–∞ B", 0.7),
        task("–ó–∞–¥–∞—á–∞ C", 0.3),
    )


async def demonstrate_fire_and_forget_problem():

    async def background_task(task_id: int):
        print(f"–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {task_id}: –Ω–∞—á–∞–ª–æ")
        await asyncio.sleep(1)
        print(f"–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {task_id}: –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–æ –ù–ï –∂–¥–µ–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    asyncio.create_task(background_task(1))
    asyncio.create_task(background_task(2))

    await asyncio.sleep(0)

    print("–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è")

    tasks = [
        asyncio.create_task(background_task(3)),
        asyncio.create_task(background_task(4)),
    ]

    await asyncio.gather(*tasks)


if __name__ == "__main__":
    pass

    # 1. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    # asyncio.run(main_sequential())

    # 2. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    # asyncio.run(main_concurrent())

    # # 3. Gather –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
    # asyncio.run(main_gather())

    # # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    # asyncio.run(demonstrate_event_loop_switching())

    # # 5. –ü—Ä–æ–±–ª–µ–º–∞: fire-and-forget
    asyncio.run(demonstrate_fire_and_forget_problem())
